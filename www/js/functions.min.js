const urlParams = new URLSearchParams(window.location.search), instance = urlParams.get("instance") ? urlParams.get("instance") : 0; let adapterNameNamespace = "energiefluss-erweitert." + instance; console.log("Using Instance: " + adapterNameNamespace); let objID = [adapterNameNamespace + ".configuration", adapterNameNamespace + ".data"], configuration_default = { line: { stroke_width: 8, stroke: "#000000" }, basic: { enable_grid: !0, enable_animation: !1, enable_area_catch: !0, height: 600, width: 800, styles: "" }, animation: { stroke: "#ffce4a", stroke_dasharray: "4 12 4 12 4 100", stroke_width: 6, animation_duration: 2e3, stroke_linecap: "round", animation_timing_function: "linear" }, animation_configuration: { dots: 4, distance: 12, length: 6 }, animations: {}, lines: {} }, configuration = configuration_default, displayMode = !1, localMode = !1, globalConfigChanged = !1; var url = window.location.pathname; let port = window.location.port; "" == port && (localMode = !0, console.log("Local Mode activated!")); var filename = url.substring(url.lastIndexOf("/") + 1); filename.includes("index") || "" == filename ? displayMode = !0 : jscolor.presets.default = { format: "rgba", borderColor: "#538EA3", borderRadius: 10, controlBorderColor: "#538EA3", previewSize: 28, previewPosition: "right", required: !1, palette: ["#00b5dd", "#61687a", "#ffce4a", "#a1d343", "#c5902e", "#f20e40"] }; let selectId, iobObjects; var iobPath = location.pathname, iobParts = iobPath.split("/"); if (iobParts.splice(-3), location.pathname.match(/^\/admin\//) && (iobParts = []), !localMode) { var e = io.connect("/", { path: iobParts.join("/") + "/socket.io", reconnectionDelay: 500, reconnectionAttempts: 1 / 0 }); e.emit("getObjects", function (e, t) { iobObjects = t }) } function initSelectId(e) { if (selectId) return e(selectId); e(selectId = $("#dialog-select-member").selectId("init", { noMultiselect: !0, objects: iobObjects, imgPath: "../../lib/css/fancytree/", filter: { type: "state" }, name: "scenes-select-state", texts: { select: _("Select"), cancel: _("Cancel"), all: _("All"), id: _("ID"), name: _("Name"), role: _("Role"), room: _("Room"), value: _("Value"), selectid: _("Select ID"), from: _("From"), lc: _("Last changed"), ts: _("Time stamp"), wait: _("Processing..."), ack: _("Acknowledged"), selectAll: _("Select all"), unselectAll: _("Deselect all"), invertSelection: _("Invert selection") }, columns: ["image", "name", "role", "room"] })) } let max_elm_id = 0, restore = {}; function displayLoading(e) { $("#loading_text").text(e), $("#loading, .loading-spinner, #loading_text").show() } function displayListener() { localMode || (e.emit("subscribe", objID), console.log("[Socket] subscribed to: " + objID.toString()), e.on("connect", function () { console.log("[Socket] connected!") }), e.on("reconnect", function () { console.log("[Socket] reconnected"), $("#loading").fadeOut("fast") }), e.on("disconnect", function () { console.log("[Socket] disconnected"), displayLoading("Reconnecting to your Energiefluss - erweitert") }), e.on("objectChange", function (e, t) { }), e.on("stateChange", function (e, t) { setTimeout(function () { if (e == objID[0]) try { displayLoading("Applying new configuration to your Energiefluss - erweitert"), configuration = JSON.parse(t.val), setLoadedConfig() } catch (o) { console.log("Error while parsing Config in JSON-Object!") } if (e == objID[1]) try { refreshData(JSON.parse(t.val)) } catch (a) { console.log("Error while parsing Values in JSON-Object!") } }, 0) }), e.on("reauthenticate", function () { console.log("[Socket] reauthenticate") }), e.on("error", function (e) { console.error("[Socket] error: " + e) }), e.on("connect_error", function (e) { console.error("[Socket] connect error: " + e) }), e.on("permissionError", function (e) { console.error("[Socket] permission error: " + e) })) } function refreshData(e) { Object.entries(e.values).forEach(t => { let [o, a] = t; $("#" + o).html(a + " " + e.unit[o]) }), Object.entries(e.animations).forEach(e => { let [t, o] = e; displayMode && $("#" + t).css("display", o ? "inline" : "none") }) } function loadConfig() { console.log("Loading config for instance: " + instance), localMode ? (configuration = localTest, console.log("Loading Local Config!"), setLoadedConfig()) : e.emit("getStates", objID, function (e, t) { if (e) console.log(e), failedMessage("An error occured, while receiving data!"); else if (t) { if (null != t[objID[0]]) try { configuration = JSON.parse(t[objID[0]].val), setLoadedConfig() } catch (o) { failedMessage("The configuration is invalid! Could not load the config!"), console.log(o) } else failedMessage("The Instance <b>" + instance + "</b>, you are trying to access does not exist!"); if (null != t[objID[1]]) try { console.log("Loading initial Data."), refreshData(JSON.parse(t[objID[1]].val)) } catch (a) { console.log(a) } } else failedMessage("Could not receive any values! Something is wrong!") }) } function getDataSources(e, t) { $("#" + e).empty().append(new Option("Please choose ...", "-1")); let o; $(".data-table tbody tr").each(function () { console.log("Data: " + $(this).data("id")), -1 == $(this).data("id") ? (console.log("Inside!"), (o = new Option("There are currently no sources added!", "-1")).disabled = !0, o.title = "Go to the tab Datasources and add some") : (o = new Option($("td:eq(0)", this).text() + " (" + $("td:eq(1)", this).text() + ")", $(this).data("id"))).selected = $(this).data("id") == t, $("#" + e).append(o) }) } function setLoadedConfig() { if ($("#svg_width_slider").val(configuration.basic.width), $("#svg_height_slider").val(configuration.basic.height), $("#svg_width_value").val(configuration.basic.width).change(), $("#svg_height_value").val(configuration.basic.height).change(), $("#enable_animation").prop("checked", configuration.basic.enable_animation).change(), $("#enable_grid").prop("checked", configuration.basic.enable_grid).change(), $("#enable_area_catch").prop("checked", configuration.basic.enable_area_catch).change(), $("#line_size").val(configuration.line.stroke_width), $("#animation_width").val(configuration.animation.stroke_width), $("#animation_duration").val(configuration.animation.animation_duration), $("#animation_type").val(configuration.animation.animation_timing_function), $("#animation_linecap").val(configuration.animation.stroke_linecap), $("#animation_dots").val(configuration.animation_configuration.dots), $("#animation_distance").val(configuration.animation_configuration.distance), $("#animation_length").val(configuration.animation_configuration.length), updateLineAnimation(), $("#style_user").empty().append(configuration.basic.styles), $("#own_css").length > 0 && $("#own_css").val(configuration.basic.styles), configuration.hasOwnProperty("elements")) { if ($(".placeholders").empty(), console.log("Loading User Config ..."), Object.entries(configuration.elements).forEach(e => { let [t, o] = e; addElement({ format: o.type, subType: o.subType, id: o.id, radius: o.radius, width: o.width, height: o.height, rx: o.rx, stroke: o.stroke, pos_x: o.pos_x, pos_y: o.pos_y, color: o.color, fill: o.fill, icon: o.icon, connPoint1: o.startSlot, connPoint2: o.endSlot, text: o.text, font_size: o.font_size, font_family: o.font_family, unit: o.unit, source: o.source || -1, degree: o.degree, shadow: o.shadow, threshold: o.threshold || 0, convert: o.convert || !1, calculate_kw: o.calculate_kw || !1, decimal_places: o.decimal_places || 0, url: o.url || "", frame: o.frame || "_overlay" }) }), Object.entries(configuration.defs).forEach(e => { let [t, o] = e; addElement({ format: o.type, id: o.id, connPoint1: o.startSlot, connPoint2: o.endSlot, d: o.d }) }), Object.entries(configuration.lines).forEach(e => { let [t, o] = e; addElement({ format: o.type, id: o.id, href: o.href, color: o.color }) }), Object.entries(configuration.animations).forEach(e => { let [t, o] = e; addElement({ format: o.type, id: o.id, href: o.href, color: o.color, animation: o.animation, animation_properties: o.animation_properties || "positive", threshold: o.threshold || 0 }) }), configuration.hasOwnProperty("datasources")) { for (var e of Object.keys(configuration.datasources)) { let t = configuration.datasources[e]; t && addDataSourceRow(e, t.source, t.alias) } $(".data-table th:eq(0)").click() } displayMode && ($("#svg_display").attr({ viewBox: "0 0 " + configuration.basic.width + " " + configuration.basic.height }), $(".all_elements").removeClass("draggable draggable-group anim_element no_animation"), $(".type_animation").addClass("animation"), $("#config_link > a").attr("href", "configuration.html?instance=" + instance), $(".type_datasource").html("").attr("title", ""), $("#overlay_frame").on("load", function () { "" != $(this).attr("src") && ($(".loading-spinner, #loading_text").fadeOut("fast"), $("#display_container").fadeIn("middle").css("display", "block")) }), $(".connector").each(function () { $(this).data("url") && ($(this).css({ "pointer-events": "all", cursor: "pointer" }), $(this).click(function () { switch ($(this).data("frame")) { case "_blank": case "_self": var e = window.open($(this).data("url"), $(this).data("frame")); e ? e.focus() : failedMessage("You need to allow opening URL's for this Website!"); break; case "_overlay": displayLoading("Loading site for element"), $("#overlay_frame").attr("src", $(this).data("url")) }console.log("URL found! " + $(this).data("url") + "Frame: " + $(this).data("frame")) })) }), displayListener()), successMessage("Layout configuration was loaded successfully!"), $("#loading").fadeOut("fast") } else successMessage("Basic configuration was loaded successfully!"), $("#loading").fadeOut("fast") } function updateLineAnimation() { $("#style_animation").empty().append(".line {stroke-width:" + configuration.line.stroke_width + "px; stroke:" + configuration.line.stroke + ";}").append(".animation {stroke:" + configuration.animation.stroke + "; stroke-dasharray:" + configuration.animation.stroke_dasharray + ";").append("stroke-width:" + configuration.animation.stroke_width + "px; animation-duration:" + configuration.animation.animation_duration + "ms;").append("stroke-linecap:" + configuration.animation.stroke_linecap + "; animation-timing-function:" + configuration.animation.animation_timing_function + ";}"), displayMode && $("#style_animation").append(".type_animation {display: none;}") } function linePreview(e) { let t = "", o = 136, a = $("#animation_width").val(), i = $("#animation_dots").val(), r = $("#animation_distance").val(), s = $("#animation_length").val(), n = $("#line_size").val(), l = $("#animation_duration").val(), c = $("#animation_linecap").val(), d = $("#animation_type").val(); for (let h = 0; h < i; h++)r > 0 && s > 0 && (t += s + " ", h != i - 1 && (t += r + " ", o -= r), o -= s); i > 0 && s > 0 && r && (t += " " + o), o < 0 && $("#" + e).val($("#" + e).val() - 1), configuration.animation.stroke_dasharray = t, configuration.animation.stroke_width = a, configuration.animation.animation_duration = l, configuration.animation.stroke_linecap = c, configuration.animation.animation_timing_function = d, configuration.line.stroke_width = n, configuration.animation_configuration.dots = i, configuration.animation_configuration.distance = r, configuration.animation_configuration.length = s, updateLineAnimation() } function successMessage(e) { $("#message_success").html(e), $("#message_success").fadeIn("middle").delay(2e3).fadeOut("middle") } function failedMessage(e) { $("#message_failed").html(e), $("#message_failed").fadeIn("middle").delay(2e3).fadeOut("middle") } function getRotationDegrees(e) { var t = e.css("-webkit-transform") || e.css("-moz-transform") || e.css("-ms-transform") || e.css("-o-transform") || e.css("transform"); if ("none" !== t) var o = t.split("(")[1].split(")")[0].split(","), a = o[0], i = Math.round(Math.atan2(o[1], a) * (180 / Math.PI)); else var i = 0; return i } function resizeSVG() { $("#svg_config").attr({ width: $("#svg_width_value").val(), height: $("#svg_height_value").val(), viewBox: "0 0 " + $("#svg_width_value").val() + " " + $("#svg_height_value").val() }) } function getCoords(e) { let t, o, a, i, r, s, n, l, c; return a = null != $(e = "#" + e).attr("r") ? parseInt($(e).attr("r")) : 0, t = null != $(e).attr("x") ? parseInt($(e).attr("x")) : parseInt($(e).attr("cx")) - a, o = null != $(e).attr("y") ? parseInt($(e).attr("y")) : parseInt($(e).attr("cy")) - a, l = null != $(e).attr("cx") ? parseInt($(e).attr("cx")) : 0, c = null != $(e).attr("cy") ? parseInt($(e).attr("cy")) : 0, i = null != $(e).attr("width") ? parseInt($(e).attr("width")) : 2 * a, r = null != $(e).attr("height") ? parseInt($(e).attr("height")) : 2 * a, s = parseInt($(e).css("stroke-width")), "text" === $(e).prop("tagName") && (i = Math.round(document.getElementById(e.replace("#", "")).getComputedTextLength()), r = parseInt($(e).css("font-size")), t = Math.round(t - Math.floor(i / 2)), o = Math.round(o - Math.floor(r / 2))), { x: t, y: o, cx: l, cy: c, width: i, height: r, r: a, stroke: s, slot: n } } function showConnectionPoints(e = !0) { e ? ($("#connection_points").empty(), $(".connector").each(function () { let e = $(this).attr("id"), t = {}; t[e] = {}; let o = $(this).prop("tagName"), a, i, r, s, n, l, c; switch (o) { case "circle": a = parseInt(2 * $(this).attr("r")), i = parseInt(2 * $(this).attr("r")), r = parseInt($(this).attr("cx") - i / 2), s = parseInt($(this).attr("cy") - a / 2), n = parseInt($(this).attr("r")), l = parseInt($(this).attr("cx")), c = parseInt($(this).attr("cy")), t[e].top_left = { x: l + n * Math.cos(connectorAngle(340)), y: c + n * Math.sin(connectorAngle(340)) }, t[e].top_right = { x: l + n * Math.cos(connectorAngle(20)), y: c + n * Math.sin(connectorAngle(20)) }, t[e].right_top = { x: l + n * Math.cos(connectorAngle(70)), y: c + n * Math.sin(connectorAngle(70)) }, t[e].right_bottom = { x: l + n * Math.cos(connectorAngle(110)), y: c + n * Math.sin(connectorAngle(110)) }, t[e].bottom_left = { x: l + n * Math.cos(connectorAngle(200)), y: c + n * Math.sin(connectorAngle(200)) }, t[e].bottom_right = { x: l + n * Math.cos(connectorAngle(160)), y: c + n * Math.sin(connectorAngle(160)) }, t[e].left_bottom = { x: l + n * Math.cos(connectorAngle(250)), y: c + n * Math.sin(connectorAngle(250)) }, t[e].left_top = { x: l + n * Math.cos(connectorAngle(290)), y: c + n * Math.sin(connectorAngle(290)) }; break; case "rect": a = parseInt($(this).attr("height")), i = parseInt($(this).attr("width")), r = parseInt($(this).attr("x")), s = parseInt($(this).attr("y")), t[e].top_left = { x: r + i / 2 - 20, y: s }, t[e].top_right = { x: r + i / 2 + 20, y: s }, t[e].left_top = { x: r, y: s + a / 2 - 20 }, t[e].left_bottom = { x: r, y: s + a / 2 + 20 }, t[e].right_top = { x: r + i, y: s + a / 2 - 20 }, t[e].right_bottom = { x: r + i, y: s + a / 2 + 20 }, t[e].bottom_left = { x: r + i / 2 - 20, y: s + a }, t[e].bottom_right = { x: r + i / 2 + 20, y: s + a } }t[e].top = { x: r + i / 2, y: s }, t[e].left = { x: r, y: s + a / 2 }, t[e].right = { x: r + i, y: s + a / 2 }, t[e].bottom = { x: r + i / 2, y: s + a }, Object.entries(t).forEach(t => { let [o, a] = t; Object.entries(a).forEach(t => { let [o, a] = t, i = document.createElementNS("http://www.w3.org/2000/svg", "circle"); i.setAttribute("class", "tmp_conn_points"), i.setAttribute("cx", a.x), i.setAttribute("cy", a.y), i.setAttribute("r", 5), i.setAttribute("class", "connPoints clickable"), i.setAttribute("data-slot", o), i.setAttribute("data-element", e), $(i).appendTo("#connection_points") }) }) })) : $("#connection_points").empty() } function addAnimation(e) { if (0 === $("#anim_" + e).length) { $("#anim_" + e).remove(); let t = document.createElementNS("http://www.w3.org/2000/svg", "use"), o = "type_animation all_elements anim_element"; $("#enable_animation").is(":checked") ? o += " animation" : o += " no_animation", t.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", "#" + e), t.setAttribute("class", o), t.setAttribute("id", "anim_" + e), t.setAttribute("data-animation", "-1"), t.setAttribute("data-animation_properties", "positive"), t.setAttribute("data-threshold", "0"), t.setAttribute("style", "stroke: " + configuration.animation.stroke + ";"), $(t).appendTo("#placeholder_animations"), $(".anim_element").off().click(function (e) { showConfigBar(e.target.id, e.target.tagName.toLowerCase()) }) } } function getSlots(e) { let t = {}, o = {}, a = {}, i = {}; return t.x = e.x + Math.floor(e.width / 2), t.y = e.y - Math.floor(e.stroke / 2), t.direction = "vertical", o.x = e.x + e.width + Math.floor(e.stroke / 2), o.y = e.y + Math.floor(e.height / 2), o.direction = "horizontal", a.x = e.x + e.width / 2, a.y = e.y + e.height + Math.floor(e.stroke / 2), a.direction = "vertical", i.x = e.x - Math.floor(e.stroke / 2), i.y = e.y + Math.floor(e.height / 2), i.direction = "horizontal", { top: t, right: o, bottom: a, left: i } } function connectorAngle(e) { return (e - 90) * Math.PI / 180 } function getSpecialSlots(e, t) { let o = []; return o.top = { x: e.x + e.width / 2, y: e.y - e.stroke / 2, direction: "vertical" }, o.left = { x: e.x - e.stroke / 2, y: e.y + e.height / 2, direction: "horizontal" }, o.right = { x: e.x + e.width + e.stroke / 2, y: e.y + e.height / 2, direction: "horizontal" }, o.bottom = { x: e.x + e.width / 2, y: e.y + e.height + e.stroke / 2, direction: "vertical" }, e.r > 0 ? (o.top_left = { x: e.cx + e.r * Math.cos(connectorAngle(340)), y: e.cy + e.r * Math.sin(connectorAngle(340)) - e.stroke / 2, direction: "vertical" }, o.top_right = { x: e.cx + e.r * Math.cos(connectorAngle(20)), y: e.cy + e.r * Math.sin(connectorAngle(20)) - e.stroke / 2, direction: "vertical" }, o.right_top = { x: e.cx + e.r * Math.cos(connectorAngle(70)) + e.stroke / 2, y: e.cy + e.r * Math.sin(connectorAngle(70)), direction: "horizontal" }, o.right_bottom = { x: e.cx + e.r * Math.cos(connectorAngle(110)) + e.stroke / 2, y: e.cy + e.r * Math.sin(connectorAngle(110)), direction: "horizontal" }, o.bottom_left = { x: e.cx + e.r * Math.cos(connectorAngle(200)), y: e.cy + e.r * Math.sin(connectorAngle(200)) + e.stroke / 2, direction: "vertical" }, o.bottom_right = { x: e.cx + e.r * Math.cos(connectorAngle(160)), y: e.cy + e.r * Math.sin(connectorAngle(160)) + e.stroke / 2, direction: "vertical" }, o.left_bottom = { x: e.cx + e.r * Math.cos(connectorAngle(250)) - e.stroke / 2, y: e.cy + e.r * Math.sin(connectorAngle(250)), direction: "horizontal" }, o.left_top = { x: e.cx + e.r * Math.cos(connectorAngle(290)) - e.stroke / 2, y: e.cy + e.r * Math.sin(connectorAngle(290)), direction: "horizontal" }) : (o.top_left = { x: e.x + e.width / 2 - 20, y: e.y - e.stroke / 2, direction: "vertical" }, o.top_right = { x: e.x + e.width / 2 + 20, y: e.y - e.stroke / 2, direction: "vertical" }, o.right_top = { x: e.x + e.width + e.stroke / 2, y: e.y + e.height / 2 - 20, direction: "horizontal" }, o.right_bottom = { x: e.x + e.width + e.stroke / 2, y: e.y + e.height / 2 + 20, direction: "horizontal" }, o.bottom_left = { x: e.x + e.width / 2 - 20, y: e.y + e.height + e.stroke / 2, direction: "vertical" }, o.bottom_right = { x: e.x + e.width / 2 + 20, y: e.y + e.height + e.stroke / 2, direction: "vertical" }, o.left_top = { x: e.x - e.stroke / 2, y: e.y + e.height / 2 - 20, direction: "horizontal" }, o.left_bottom = { x: e.x - e.stroke / 2, y: e.y + e.height / 2 + 20, direction: "horizontal" }), { spec: o[t] } } function getDistance(e, t) { let o = 0, a = 0; return o = t.x > e.x ? t.x - e.x : e.x - t.x, o *= o, a = t.y > e.y ? t.y - e.y : e.y - t.y, Math.sqrt(o + (a *= a)) } function connectElements(e, t, o) { let a = getCoords(t), i = getCoords(o), r, s, n, l; r = $("#" + e).data("start-slot"), s = $("#" + e).data("end-slot"); let c = [], d = [], h = [], m = [], f = [], u = [], g = []; for (var p of (n = "undefined" !== r ? getSpecialSlots(a, r) : getSlots(a), l = "undefined" !== s ? getSpecialSlots(i, s) : getSlots(i), Object.keys(n))) { let y = n[p]; for (var p of Object.keys(l)) { let b = l[p]; c.push(getDistance(y, b)), d.push(y.x), m.push(y.y), u.push(y.direction), h.push(b.x), f.push(b.y), g.push(b.direction) } } let v = c[0], x = 0; for (var w = 1; w < c.length; w++)c[w] < v && (v = c[w], x = w); let k = d[x], A = m[x], C; drawPath(e, k, A, h[x], f[x], u[x], g[x]) } function polarToCartesian(e, t, o, a) { var i = (a - 90) * Math.PI / 180; return { x: e + o * Math.cos(i), y: t + o * Math.sin(i) } } function describeArc(e, t, o, a, i, r) { var s = polarToCartesian(e, t, o, i); return polarToCartesian(e, t, o, a), ["A", o, o, 0, i - a <= 180 ? "0" : "1", r, s.x, s.y] } function drawPath(e, t, o, a, i, r, s, n = 15) { let l = { x: 0, y: 0 }, c = [], d = t > a ? t - a : a - t, h = o > i ? o - i : i - o; d < 2 * n && (n = Math.floor(d / 2)), h < 2 * n && (n = Math.floor(h / 2)); let m = a > t ? parseInt(a - t) : parseInt(t - a), f = parseInt(i - o); c[0] = "M" + t + " " + o, l = { x: t, y: o }; let u; if (a > t) { let g = t + .2 * m; c[1] = " H " + g, l.x = g } if (a < t) { let p = t - .2 * m; c[1] = " H " + p, l.x = p } if (i == o && (c[1] = " H " + a), a === t && (c[1] = " V " + i), a != t && i != o) { if (i > o && a > t) { u = describeArc(l.x, l.y + n, n, 0, 90, 1); let y = i - n; if (l = { x: u[6], y: u[7] }, c[2] = u.join(" "), c[3] = " V " + y, l.y = y, u = describeArc(l.x, l.y + n, n, 0, 90, 0), c[4] = u.join(" "), c[5] = " H " + a, "vertical" == r && "vertical" == s) { l = { x: t, y: o }; let b = o + .2 * f; c[1] = " V " + b, l.y = b, u = describeArc(l.x, l.y + n, n, 0, 90, 0), b = a - n, l = { x: u[6], y: u[7] }, c[2] = u.join(" "), c[3] = " H " + b, l.x = b, l = { x: (u = describeArc(l.x, l.y + n, n, 0, 90, 1))[6], y: u[7] }, c[4] = u.join(" "), c[5] = " V " + i } if ("horizontal" == r && "vertical" == s) { l = { x: t, y: o }; let v = t + .2 * m; c[1] = " H " + v, l.x = v, v = a - n, c[2] = "", c[3] = " H " + v, l.x = v, l = { x: (u = describeArc(l.x, l.y + n, n, 0, 90, 1))[6], y: u[7] }, c[4] = u.join(" "), c[5] = " V " + i } if ("vertical" == r && "horizontal" == s) { let x = o + .2 * f; l = { x: t, y: x }, c[1] = " V " + x, x = i - n, l.y = x, c[2] = "", c[3] = " V " + x, u = describeArc(l.x, l.y + n, n, 0, 90, 0), c[4] = u.join(" "), c[5] = " H " + a } } if (i > o && a < t) { u = describeArc(l.x, l.y + n, n, 180, 270, 0); let w = i - n; if (l = { x: u[6], y: w }, c[2] = u.join(" "), c[3] = " V " + w, u = describeArc(l.x, l.y + n, n, 180, 270, 1), c[4] = u.join(" "), c[5] = " H " + a, "vertical" == r && "vertical" == s) { let k = o + .2 * f; l = { x: t, y: k }, c[1] = " V " + k, u = describeArc(l.x - n, l.y, n, 90, 180, 1), l = { x: k = a + n, y: u[7] }, c[2] = u.join(" "), c[3] = " H " + k, u = describeArc(l.x, l.y + n, n, 180, 270, 0), c[4] = u.join(" "), c[5] = " V " + i } if ("vertical" == r && "horizontal" == s) { let A = o + .2 * f; l = { x: t, y: A }, c[1] = " V " + A, A = i - n, l.y = A, c[2] = "", c[3] = " V " + A, u = describeArc(l.x, l.y + n, n, 180, 270, 1), c[4] = u.join(" "), c[5] = " H " + a } if ("horizontal" == r && "vertical" == s) { l = { x: t, y: o }; let C = t - .2 * m; c[1] = " H " + C, l.x = C, C = a + n, c[2] = "", c[3] = " H " + C, l.x = C, l = { x: (u = describeArc(l.x, l.y + n, n, 180, 270, 0))[6], y: u[7] }, c[4] = u.join(" "), c[5] = " V " + i } } if (i < o && a > t) { u = describeArc(l.x, l.y - n, n, 0, 90, 0); let S = i + n; if (l = { x: u[6], y: S }, c[2] = u.join(" "), c[3] = " V " + S, u = describeArc(l.x + n, l.y, n, 270, 360, 1), c[4] = u.join(" "), c[5] = " H " + a, "vertical" == r && "horizontal" == s) { let N = o + .2 * f; l = { x: t, y: N }, c[1] = " V " + N, N = i + n, l.y = N, c[2] = "", c[3] = " V " + N, u = describeArc(l.x, l.y - n, n, 0, 90, 1), c[4] = u.join(" "), c[5] = " H " + a } if ("vertical" == r && "vertical" == s) { let E = o + .2 * f; l = { x: t, y: E }, c[1] = " V " + E, u = describeArc(l.x, l.y - n, n, 0, 90, 1), l = { x: E = a - n, y: u[7] }, c[2] = u.join(" "), c[3] = " H " + E, u = describeArc(l.x, l.y - n, n, 0, 90, 0), c[4] = u.join(" "), c[5] = " V " + i } if ("horizontal" == r && "vertical" == s) { l = { x: t, y: o }; let j = t + .2 * m; c[1] = " H " + j, l.x = j, j = a - n, c[2] = "", c[3] = " H " + j, l.x = j, l = { x: (u = describeArc(l.x, l.y - n, n, 0, 90, 0))[6], y: u[7] }, c[4] = u.join(" "), c[5] = " V " + i } } if (i < o && a < t) { u = describeArc(l.x, l.y - n, n, 180, 270, 1); let z = i + n; if (l = { x: u[6], y: z }, c[2] = u.join(" "), c[3] = " V " + z, u = describeArc(l.x - 2 * n, l.y - n, n, 0, 90, 0), c[4] = u.join(" "), c[5] = " H " + a, "vertical" == r && "horizontal" == s) { let L = o + .2 * f; l = { x: t, y: L }, c[1] = " V " + L, c[2] = "", L = i + n, l.y = L, u = describeArc(l.x - 2 * n, l.y - n, n, 0, 90, 0), c[4] = u.join(" "), c[5] = " H " + a } if ("vertical" == r && "vertical" == s) { let D = o + .2 * f; l = { x: t, y: D }, c[1] = " V " + D, u = describeArc(l.x - 2 * n, l.y - n, n, 0, 90, 0), l = { x: D = a + n, y: u[7] }, c[2] = u.join(" "), c[3] = " H " + D, u = describeArc(l.x, l.y - n, n, 180, 270, 1), c[4] = u.join(" "), c[5] = "  V " + i } if ("horizontal" == r && "vertical" == s) { l = { x: t, y: o }; let I = t - .2 * m; c[1] = " H " + I, l.x = I, I = a + n, c[2] = "", c[3] = " H " + I, l.x = I, l = { x: (u = describeArc(l.x, l.y - n, n, 180, 270, 1))[6], y: u[7] }, c[4] = u.join(" "), c[5] = " V " + i } } } addAnimation(e), $("#" + e).attr("d", c.join(" ")) } function getShadowColor(e) { let t = $("#" + e).css("filter").replace("drop-shadow(", "").split(" "); return "none" != t[0] ? t[0] + t[1] + t[2] + t[3] : "" } function showConfigBar(e, t) { console.log(getCoords(e)); let o = getShadowColor(e); $("#elm_shadow").prop("checked", "" != o), $("elm_calculation").prop("checked", !1), $("elm_convert").prop("checked", !1), restore = {}, $(".elm_config").attr("style", ""), $(".all_elements").addClass("faded_out"), $("#" + e).removeClass("faded_out"), $(".elm_config").prop("disabled", !1), restore.id = $("#" + e).attr("id"), $(".elm_config_circle, .elm_config_text, .elm_config_rect, .elm_config_use, .elm_config_datasource, .elm_config_svg").hide(), restore.shadow_color = o, $("#elm_shadow_color")[0].jscolor.fromString(restore.shadow_color); let a = $("#" + e).data("type"); switch (t) { case "rect": $(".elm_config_rect").show(), restore.elm_width = $("#" + e).attr("width"), $("#elm_width").val(restore.elm_width), restore.elm_height = $("#" + e).attr("height"), $("#elm_height").val(restore.elm_height), restore.pos_x = $("#" + e).attr("x"), $("#elm_pos_x").val(restore.pos_x), restore.pos_y = $("#" + e).attr("y"), $("#elm_pos_y").val(restore.pos_y), restore.rx = $("#" + e).attr("rx"), $("#elm_rx").val(restore.rx), restore.color = $("#" + e).css("stroke"), $("#elm_color")[0].jscolor.fromString(restore.color), restore.fill = "none" == $("#" + e).css("fill") ? "" : $("#" + e).css("fill"), $("#elm_fill")[0].jscolor.fromString(restore.fill), restore.stroke = $("#" + e).css("stroke-width").replace("px", ""), $("#elm_stroke").val(restore.stroke), restore.url = $("#" + e).data("url"), $("#elm_url").val(restore.url), restore.frame = $("#" + e).data("frame"), $("#elm_frame").val(restore.frame); break; case "circle": $(".elm_config_circle").show(), restore.radius = $("#" + e).attr("r"), $("#elm_radius").val(restore.radius), restore.pos_x = $("#" + e).attr("cx"), $("#elm_pos_x").val(restore.pos_x), restore.pos_y = $("#" + e).attr("cy"), $("#elm_pos_y").val(restore.pos_y), restore.color = $("#" + e).css("stroke"), $("#elm_color")[0].jscolor.fromString(restore.color), restore.fill = "none" == $("#" + e).css("fill") ? "" : $("#" + e).css("fill"), $("#elm_fill")[0].jscolor.fromString(restore.fill), restore.stroke = $("#" + e).css("stroke-width").replace("px", ""), $("#elm_stroke").val(restore.stroke), restore.url = $("#" + e).data("url"), $("#elm_url").val(restore.url), restore.frame = $("#" + e).data("frame"), $("#elm_frame").val(restore.frame); break; case "text": $(".elm_config_text").show(), $(".elm_config_text_not_ds").show(), "datasource" == a && (restore.unit = $("#" + e).data("unit"), $("#elm_unit").val(restore.unit), restore.source = $("#" + e).data("source"), getDataSources("elm_source", restore.source), restore.calculate_kw = $("#" + e).data("calculate_kw"), $("#elm_calculation").prop("checked", !0 === restore.calculate_kw), restore.convert = $("#" + e).data("convert"), $("#elm_convert").prop("checked", !0 === restore.convert), restore.threshold = $("#" + e).data("threshold"), $("#elm_threshold").val(restore.threshold), restore.decimal_places = $("#" + e).data("decimal_places"), $("#elm_decimal_places").val(restore.decimal_places), $(".elm_config_datasource").show(), $(".elm_config_text_not_ds").hide()), restore.pos_x = $("#" + e).attr("x"), $("#elm_pos_x").val(restore.pos_x), restore.pos_y = $("#" + e).attr("y"), $("#elm_pos_y").val(restore.pos_y), restore.color = $("#" + e).css("stroke"), $("#elm_color")[0].jscolor.fromString(restore.color), restore.fill = "none" == $("#" + e).css("fill") ? "" : $("#" + e).css("fill"), $("#elm_fill")[0].jscolor.fromString(restore.fill), restore.text = $("#" + e).html(), $("#elm_text").val(restore.text), restore.font = $("#" + e).css("font-family"), $("#elm_font").val(restore.font), restore.degree = getRotationDegrees($("#" + e)), restore.font_size = $("#" + e).css("font-size").replace("px", ""), $("#elm_font_size").val(restore.font_size); break; case "use": restore.animation = $("#" + e).data("animation"), getDataSources("elm_animation", restore.animation), restore.animation_properties = $("#" + e).data("animation_properties"), $("#elm_animation_properties").val(restore.animation_properties), restore.threshold = $("#" + e).data("threshold"), $("#elm_threshold").val(restore.threshold), $(".elm_config_use").show(), $("#" + e.replace("anim", "line")).removeClass("faded_out"), restore.color = $("#" + e).css("stroke"), $("#elm_color")[0].jscolor.fromString(restore.color), restore.line_color = $("#" + e.replace("anim", "line")).css("stroke"), $("#elm_line_color")[0].jscolor.fromString(restore.line_color), restore.startSlot = $("#" + e.replace("anim_", "")).data("start-slot"), restore.endSlot = $("#" + e.replace("anim_", "")).data("end-slot"); break; case "svg": $(".elm_config_svg").show(), restore.elm_width = $("#" + e).attr("width"), $("#elm_width").val(restore.elm_width), restore.elm_height = $("#" + e).attr("height"), $("#elm_height").val(restore.elm_height), restore.pos_x = $("#" + e).attr("x"), $("#elm_pos_x").val(restore.pos_x), restore.pos_y = $("#" + e).attr("y"), $("#elm_pos_y").val(restore.pos_y), restore.icon = $("#" + e).data("icon"), $("#elm_icon").val(restore.icon), restore.color = $("#" + e).css("color"), $("#elm_color")[0].jscolor.fromString(restore.color), restore.fill = "none" == $("#" + e).css("fill") ? "" : $("#" + e).css("fill"), $("#elm_fill")[0].jscolor.fromString(restore.fill) }function i(t) { let o = document.createElementNS("http://www.w3.org/2000/svg", "symbol"); o.setAttribute("x", $("#" + e).attr("x")), o.setAttribute("y", $("#" + e).attr("y")), o.setAttribute("data-width", $("#" + e).attr("width")), o.setAttribute("data-height", $("#" + e).attr("height")), o.setAttribute("data-icon", t), o.setAttribute("class", "iconify type_icon all_elements added_elements draggable draggable-group"), o.setAttribute("id", restore.id), o.setAttribute("style", "color: " + restore.color + ";"), $("#" + e).remove(), $(o).appendTo("#placeholder_icons") } $("#config_bar").addClass("show"), $(".elm_config").off().on("input change", function (o) { globalConfigChanged = !0; let a = $("#elm_fill").val() ? $("#elm_fill").val() : "none"; "elm_shadow" == o.target.id && "" == $("#elm_shadow_color").val() && $("#elm_shadow_color")[0].jscolor.fromString("rgba(0, 0, 0, 0.7)"), "elm_shadow_color" == o.target.id && $("#elm_shadow").prop("checked", !0); let i = "drop-shadow(0px 3px 3px " + $("#elm_shadow_color").val() + ")", r = $("path[id*=" + restore.id + "]"); r.length > 0 && r.each(function (e) { let t = r[e].id.split("_"); connectElements(r[e].id, t[1], t[2]) }); let s = parseInt($("#svg_config").attr("height")), n = parseInt($("#svg_config").attr("width")), l = parseInt($("#elm_radius").val()), c = parseInt($("#elm_stroke").val()) / 2, d = parseInt($("#elm_font_size").val()), h, m; switch (t) { case "rect": h = n - $("#elm_width").val() - c, m = s - $("#elm_height").val() - c, $("#elm_pos_x").val() - c >= 0 && $("#elm_pos_x").val() <= h && $("#elm_pos_y").val() - c >= 0 && $("#elm_pos_y").val() <= m ? $("#" + e).attr({ width: $("#elm_width").val(), height: $("#elm_height").val(), rx: $("#elm_rx").val(), x: $("#elm_pos_x").val(), y: $("#elm_pos_y").val() }) : $(this).val() > c ? $("#" + o.target.id).val($(this).val() - 1) : $("#" + o.target.id).val(c), $("#" + e).data({ frame: $("#elm_frame").val(), url: $("#elm_url").val() }), $("#" + e).css({ "stroke-width": $("#elm_stroke").val() + "px", stroke: $("#elm_color").val(), fill: a }), $("#elm_shadow").is(":checked") ? $("#" + e).css({ filter: i }) : $("#" + e).css({ filter: "" }); break; case "circle": h = n - l - c, m = s - l - c, $("#elm_pos_x").val() - c - l >= 0 && $("#elm_pos_y").val() - c - l >= 0 && $("#elm_pos_x").val() <= h && $("#elm_pos_y").val() - c >= 0 && $("#elm_pos_y").val() <= m ? $("#" + e).attr({ r: $("#elm_radius").val(), cx: $("#elm_pos_x").val(), cy: $("#elm_pos_y").val() }) : $("#elm_pos_x").val() - c - l < 0 || $("#elm_pos_y").val() - c - l < 0 ? $("#" + o.target.id).val(parseInt($(this).val()) + 1) : $("#" + o.target.id).val(parseInt($(this).val()) - 1), $("#" + e).data({ frame: $("#elm_frame").val(), url: $("#elm_url").val() }), $("#" + e).css({ "stroke-width": $("#elm_stroke").val() + "px", stroke: $("#elm_color").val(), fill: a }), $("#elm_shadow").is(":checked") ? $("#" + e).css({ filter: i }) : $("#" + e).css({ filter: "" }); break; case "text": h = n - $("#elm_font_size").val(), m = s - $("#elm_font_size").val() / 2, $("#elm_pos_x").val() - d >= 0 && $("#elm_pos_x").val() <= h && $("#elm_pos_y").val() - d / 2 >= 0 && $("#elm_pos_y").val() <= m ? $("#" + e).attr({ x: $("#elm_pos_x").val(), y: $("#elm_pos_y").val() }) : $("#elm_pos_x").val() - d < 0 || $("#elm_pos_y").val() - d / 2 < 0 ? $("#" + o.target.id).val(parseInt($(this).val()) + 1) : $("#" + o.target.id).val(parseInt($(this).val()) - 1), $("#" + e).html($("#elm_text").val()), $("#" + e).data({ unit: $("#elm_unit").val(), source: $("#elm_source").val(), threshold: $("#elm_threshold").val(), decimal_places: $("#elm_decimal_places").val(), calculate_kw: $("#elm_calculation").prop("checked"), convert: $("#elm_convert").prop("checked") }), $("#" + e).css({ "font-family": $("#elm_font").val(), "font-size": $("#elm_font_size").val() + "px", stroke: $("#elm_color").val(), fill: a }), $("#elm_shadow").is(":checked") ? $("#" + e).css({ filter: i }) : $("#" + e).css({ filter: "" }); break; case "use": $("#" + e).data({ threshold: $("#elm_threshold").val(), animation: $("#elm_animation").val(), animation_properties: $("#elm_animation_properties").val() }), $("#" + e).css({ stroke: $("#elm_color").val() }), $("#" + e.replace("anim", "line")).css({ stroke: $("#elm_line_color").val() }); break; case "svg": $("#" + e).attr({ width: $("#elm_width").val(), height: $("#elm_height").val(), x: $("#elm_pos_x").val(), y: $("#elm_pos_y").val() }), $("#" + e).css("color", $("#elm_color").val()), $("#elm_shadow").is(":checked") ? $("#" + e).css({ filter: i }) : $("#" + e).css({ filter: "" }) } }), $("#elm_icon").on("input", function () { $(this).autocomplete({ position: { my: "right top", at: "right bottom" }, source: function (e, t) { $.ajax({ minLength: 1, url: "https://api.iconify.design/search?", type: "GET", data: { query: e.term }, success: function (e) { t($.map(e.icons, function (e) { return { label: e } })) } }) }, select: function (e, t) { return i(t.item.value), t.item.value } }).autocomplete("instance")._renderItem = function (e, t) { return $("<li class='ui-menu-item'>").append("<div class='ui-menu-item-wrapper'><span class='iconify' data-width='24' data-icon='" + t.label + "'></span><span style='font-weight: normal; padding-left:10px;'>" + t.label + "</span></div>").appendTo(e) } }), $("#restore_element").off().click(function () { if (this.blur(), 0 === $("#" + e).length) { let o = $("#elm_fill").val() ? $("#elm_fill").val() : "none"; addElement({ format: t, subType: a, id: restore.id, radius: $("#elm_radius").val(), width: $("#elm_width").val(), height: $("#elm_height").val(), rx: $("#elm_rx").val(), stroke: $("#elm_stroke").val(), pos_x: $("#elm_pos_x").val(), pos_y: $("#elm_pos_y").val(), color: $("#elm_color").val(), fill: o, icon: $("#elm_icon").val(), connPoint1: restore.startSlot, connPoint2: restore.endSlot, text: $("#elm_text").val(), font_size: $("#elm_font_size").val(), font_family: $("#elm_font").val(), unit: $("#elm_unit").val(), source: $("#elm_source").val(), degree: restore.degree, shadow: $("#elm_shadow_color").val(), animation: $("#elm_animation").val(), animation_properties: $("#elm_animation_properties"), threshold: $("#elm_threshold").val(), calculate_kw: $("#elm_calculation").prop("checked"), convert: $("#elm_convert").prop("checked"), decimal_places: $("#elm_decimal_places").val(), url: $("#elm_url").val(), frame: $("#elm_frame").val() }), $("#" + e).length > 0 ? (successMessage("Element restored!"), $(".elm_config").prop("disabled", !1)) : (failedMessage("An Error occured, while restoring the Element!"), $(".elm_config").prop("disabled", !0)) } else { Object.entries(restore).forEach(e => { let [t, o] = e; $("#elm_" + t).val(o) }); let r = restore.fill ? restore.fill : "none", s = ""; switch (restore.shadow_color ? (s = "drop-shadow(0px 3px 3px " + restore.shadow_color + ")", $("#elm_shadow").prop("checked", !0)) : $("#elm_shadow").prop("checked", !1), $("#elm_color")[0].jscolor.fromString(restore.color), $("#elm_line_color")[0].jscolor.fromString(restore.line_color), $("#elm_shadow_color")[0].jscolor.fromString(restore.shadow_color), t) { case "rect": $("#" + e).attr({ width: restore.width, height: restore.height, rx: restore.rx, x: restore.pos_x, y: restore.pos_y }), $("#" + e).data({ url: restore.url, frame: restore.frame }), $("#" + restore.id).css({ "stroke-width": restore.stroke + "px", stroke: restore.color, fill: r, filter: s }); break; case "circle": $("#" + e).attr({ r: restore.radius, cx: restore.pos_x, cy: restore.pos_y }), $("#" + e).data({ url: restore.url, frame: restore.frame }), $("#" + restore.id).css({ "stroke-width": restore.stroke + "px", stroke: restore.color, fill: r, filter: s }); break; case "text": $("#" + e).attr({ x: restore.pos_x, y: restore.pos_y }), $("#" + e).html(restore.text), $("#" + e).css({ "font-family": restore.font, "font-size": restore.font_size + "px", stroke: restore.color, fill: r, "transform-box": "fill-box", transform: "rotate(" + restore.degree + "deg)", filter: s }), "datasource" == a && ($("#elm_calculation").prop("checked", !0 === restore.calculate_kw), $("#elm_convert").prop("checked", !0 === restore.convert), $("#" + e).data({ unit: restore.unit, source: restore.source, calculate_kw: restore.calculate_kw, convert: restore.convert, threshold: restore.threshold, decimal_places: restore.decimal_places })); break; case "use": console.log(e.replace("anim", "line")), $("#" + e).data({ animation: restore.animation, animation_properties: restore.animation_properties }), $("#" + e).css({ stroke: restore.color }), $("#" + e.replace("anim", "line")).css({ stroke: restore.line_color, filter: s }); break; case "svg": i(restore.icon), $("#" + e).attr({ width: restore.width, height: restore.height, x: restore.pos_x, y: restore.pos_y }), $("#" + e).css({ color: restore.color, filter: s }) }let n = $("path[id*=" + restore.id + "]"); n.length > 0 && n.each(function (e) { let t = n[e].id.split("_"); connectElements(n[e].id, t[1], t[2]) }) } }), $("#delete_element").off().click(function () { (this.blur(), $(".elm_config").prop("disabled", !0), "use" == t) ? ($("#" + e.replace("anim", "line")).remove(), $("#" + e.replace("anim_", "")).remove(), $("#" + e).remove(), successMessage("Line deleted!")) : $("path[id*=" + restore.id + "]").length > 0 ? failedMessage("Element can not be deleted! Existing connection!") : ($("#" + e).remove(), successMessage("Element deleted!")) }), $("#rotate_cw, #rotate_ccw").off().click(function (t) { if ($("#" + e).length > 0) { let o = !0 == t.target.id ? t.target.id : $(this).closest("a").attr("id"), a = getRotationDegrees($("#" + e)); a += "rotate_cw" == o ? 45 : -45, $("#" + e).css({ "transform-box": "fill-box", transform: "rotate(" + a + "deg)" }) } else console.log("Element deleted! No dgree possible!") }) } function hideConfigBar() { $(".all_elements").removeClass("faded_out"), $("#config_bar").removeClass("show").scrollTop(0), $(".elm_config").off().val(""), $("#tab1_config").prop("checked", !0), $("#elm_icon").hasClass("ui-autocomplete-input") && $("#elm_icon").autocomplete("destroy") } function hideIframe() { $("#loading").fadeOut("fast", function () { $("#overlay_frame").attr("src", ""), $("#display_container").hide() }) } function addElement(e) { let t = "", o = "all_elements added_elements draggable"; switch (e.shadow && (t = " filter: drop-shadow(0px 3px 3px " + e.shadow + ");"), e.format) { case "rect": let a = document.createElementNS("http://www.w3.org/2000/svg", "rect"); a.setAttribute("x", e.pos_x), a.setAttribute("y", e.pos_y), a.setAttribute("width", e.width), a.setAttribute("height", e.height), a.setAttribute("rx", e.rx), a.setAttribute("class", o + " type_rect connector"), a.setAttribute("data-url", e.url), a.setAttribute("data-frame", e.frame), a.setAttribute("id", e.id), a.setAttribute("style", "stroke: " + e.color + "; stroke-width: " + e.stroke + "px; fill:" + e.fill + ";" + t), $(a).appendTo("#placeholder_elements"); break; case "circle": let i = document.createElementNS("http://www.w3.org/2000/svg", "circle"); i.setAttribute("cx", e.pos_x), i.setAttribute("cy", e.pos_y), i.setAttribute("r", e.radius), i.setAttribute("class", o + " type_circle connector"), i.setAttribute("data-url", e.url), i.setAttribute("data-frame", e.frame), i.setAttribute("id", e.id), i.setAttribute("style", "stroke: " + e.color + "; stroke-width: " + e.stroke + "px; fill:" + e.fill + ";" + t), $(i).appendTo("#placeholder_elements"); break; case "text": let r = document.createElementNS("http://www.w3.org/2000/svg", "text"), s = ""; e.degree && (s = " transform-box: fill-box; transform: rotate(" + e.degree + "deg)"), r.setAttribute("x", e.pos_x), r.setAttribute("y", e.pos_y), r.setAttribute("id", e.id), r.setAttribute("dominant-baseline", "central"), r.setAttribute("style", "stroke: " + e.color + "; fill: " + e.fill + "; font-family: " + e.font_family + "; font-size: " + e.font_size + "px;" + s + t), "datasource" == e.subType ? (r.setAttribute("data-unit", e.unit), r.setAttribute("data-type", "datasource"), r.setAttribute("class", o + " type_datasource"), r.setAttribute("data-source", e.source), r.setAttribute("data-threshold", e.threshold), r.setAttribute("data-calculate_kw", e.calculate_kw), r.setAttribute("data-convert", e.convert), r.setAttribute("data-decimal_places", e.decimal_places)) : (r.setAttribute("data-type", "text"), r.setAttribute("class", o + " type_text")), r.innerHTML = e.text, $(r).appendTo("#placeholder_text"); break; case "svg": case "icon": let n = document.createElementNS("http://www.w3.org/2000/svg", "symbol"); n.setAttribute("x", e.pos_x), n.setAttribute("y", e.pos_y), n.setAttribute("class", o + " type_icon draggable-group iconify"), n.setAttribute("id", e.id), n.setAttribute("data-icon", e.icon), n.setAttribute("data-width", e.width), n.setAttribute("data-height", e.height), n.setAttribute("data-type", "icon"), n.setAttribute("style", "color: " + e.color + ";" + t), $(n).appendTo("#placeholder_icons"); break; case "use": let l = e.id.replace("anim_", ""), c = l.split("_"), d = document.createElementNS("http://www.w3.org/2000/svg", "path"); d.setAttribute("id", l), d.setAttribute("class", "type_def"), d.setAttribute("data-start-slot", e.connPoint1), d.setAttribute("data-end-slot", e.connPoint2), $(d).appendTo("#placeholder_defs"), addElement({ format: "line", id: "line_" + l, color: configuration.line.stroke, href: "#" + l }), connectElements(l, c[1], c[2]); break; case "def": let h = document.createElementNS("http://www.w3.org/2000/svg", "path"); h.setAttribute("id", e.id), h.setAttribute("class", "type_def"), h.setAttribute("data-start-slot", e.connPoint1), h.setAttribute("data-end-slot", e.connPoint2), h.setAttribute("d", e.d), $(h).appendTo("#placeholder_defs"); break; case "line": let m = document.createElementNS("http://www.w3.org/2000/svg", "use"); m.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", e.href), m.setAttribute("id", e.id), m.setAttribute("class", "line type_line all_elements"), m.setAttribute("style", "stroke: " + e.color + ";"), $(m).appendTo("#placeholder_lines"); break; case "animation": o = "type_animation all_elements anim_element", $("#enable_animation").prop("checked") ? o += " animation" : o += " no_animation"; let f = document.createElementNS("http://www.w3.org/2000/svg", "use"); f.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", e.href), f.setAttribute("id", e.id), f.setAttribute("class", o), f.setAttribute("style", "stroke: " + e.color + ";"), f.setAttribute("data-animation", e.animation), f.setAttribute("data-animation_properties", e.animation_properties), f.setAttribute("data-threshold", e.threshold), $(f).appendTo("#placeholder_animations"), displayMode || $(".anim_element").off().click(function (e) { showConfigBar(e.target.id, e.target.tagName.toLowerCase()) }) } } function getRandomInt(e) { return Math.floor(Math.random() * e) } function getRandomRGBA() { var e = Math.round, t = Math.random; return "rgba(" + e(255 * t()) + "," + e(255 * t()) + "," + e(255 * t()) + ",1)" } function addDataSourceRow(e, t, o) { $(".btn-cancel").trigger("click"); let a = !0; if ($(".data-table tbody tr").each(function () { if ($("td:eq(1)", this).text().toLowerCase() == t.toLowerCase()) return $(this).effect("highlight", { color: "lightgreen" }, 3e3), a = !1, !1; console.log($("td:eq(1)", this).text()) }), a) { if (-1 == e) { console.log("Need new Key!"); let i = -1; $(".data-table tbody tr").each(function () { i = Math.max($(this).data("id"), i) }), i++, console.log("Found: " + i), e = i } let r = "<tr data-source='" + t + "' data-alias='" + o + "' data-id='" + e + "'><td>" + o + "</td><td>" + t + "</td><td><button class='all_datasource ds_buttons btn-edit'><span class='iconify' data-height='24' data-icon='mdi:pencil'>Edit</span></button><button class='all_datasource ds_buttons btn-delete'><span class='iconify red_icon' data-height='24' data-icon='mdi:delete'>Delete</span></button></td></tr>"; $(".data-table tbody").append(r), $(".data-table tbody").find("tr:last-child").hide().fadeIn("slow"), $("#ds_tmp_line").remove() } } function getdataSourceCellValue(e, t) { return $(e).children("td").eq(t).text() } function dataSourceComparer(e) { return function (t, o) { var a = getdataSourceCellValue(t, e), i = getdataSourceCellValue(o, e); return $.isNumeric(a) && $.isNumeric(i) ? a - i : a.toString().localeCompare(i) } } function makeDraggable(e) { var t = e.target; function o(e) { var o = t.getScreenCTM(); return e.touches && (e = e.touches[0]), { x: parseInt((e.clientX - o.e) / o.a), y: parseInt((e.clientY - o.f) / o.d) } } t.addEventListener("mousedown", g), t.addEventListener("touchstart", g), t.addEventListener("mousemove", p), t.addEventListener("touchmove", p), t.addEventListener("mouseup", y), t.addEventListener("touchend", y), t.addEventListener("touchleave", y), t.addEventListener("touchcancel", y); let a = null, i, r, s, n, l, c, d, h, m, f = [], u = !1; function g(e) { e.target.classList.contains("draggable") && (a = e.target), e.target.parentNode.classList.contains("draggable-group") && (a = e.target.parentNode), a && function e(g) { switch (u = !1, m = $("path[id*=" + a.id + "]"), f = [], m.length > 0 && m.each(function (e) { let t = m[e].id.split("_"); f.push({ path: m[e].id, from: t[1], to: t[2] }) }), a.classList.add("dragging"), i = o(g), n = parseInt(t.getAttributeNS(null, "height")), l = parseInt(t.getAttributeNS(null, "width")), c = parseInt(a.style.strokeWidth) / 2, d = parseInt(a.getAttributeNS(null, "r")), h = $("#" + a.id).css("font-size").replace("px", ""), a.tagName.toLowerCase()) { case "circle": r = l - d - c, s = n - d - c, i.x -= parseInt(a.getAttributeNS(null, "cx")), i.y -= parseInt(a.getAttributeNS(null, "cy")); break; case "rect": r = l - parseInt(a.getAttributeNS(null, "width")) - c, s = n - parseInt(a.getAttributeNS(null, "height")) - c, i.x -= parseInt(a.getAttributeNS(null, "x")), i.y -= parseInt(a.getAttributeNS(null, "y")); break; case "text": r = l - h, s = n - h / 2, i.x -= parseInt(a.getAttributeNS(null, "x")), i.y -= parseInt(a.getAttributeNS(null, "y")); break; case "svg": r = l - parseInt(a.getAttributeNS(null, "width")), s = n - parseInt(a.getAttributeNS(null, "height")), i.x -= parseInt(a.getAttributeNS(null, "x")), i.y -= parseInt(a.getAttributeNS(null, "y")) } }(e) } function p(e) { if (a) { $(".anim_element").removeClass("animation").addClass("no_animation"), hideConfigBar(); var t = o(e); switch (u = !0, a.tagName.toLowerCase()) { case "circle": t.x - i.x - c >= d && t.x - i.x <= r && a.setAttributeNS(null, "cx", t.x - i.x), t.y - i.y - c >= d && t.y - i.y <= s && a.setAttributeNS(null, "cy", t.y - i.y); break; case "rect": t.x - i.x - c >= 0 && t.x - i.x <= r && a.setAttributeNS(null, "x", t.x - i.x), t.y - i.y - c >= 0 && t.y - i.y <= s && a.setAttributeNS(null, "y", t.y - i.y); break; case "text": t.x - i.x - h >= 0 && t.x - i.x <= r && a.setAttributeNS(null, "x", t.x - i.x), t.y - i.y - h / 2 >= 0 && t.y - i.y <= s && a.setAttributeNS(null, "y", t.y - i.y); break; case "svg": t.x - i.x >= 0 && t.x - i.x <= r && a.setAttributeNS(null, "x", t.x - i.x), t.y - i.y >= 0 && t.y - i.y <= s && a.setAttributeNS(null, "y", t.y - i.y) }if (f) for (var n of f) connectElements(n.path, n.from, n.to) } } function y(e) { let t = null; null != a && (a.classList.remove("dragging"), t = setTimeout(function () { $("#enable_animation").prop("checked") && $(".anim_element").removeClass("no_animation").addClass("animation") }, 1e3), !1 === u && showConfigBar(a.id, a.tagName.toLowerCase()), a = null) } } $(function () { $(".tt-element").tooltip({ position: { my: "left", at: "right+10% center", collision: "flipfit" }, content: function () { return $(this).attr("title") } }), $(document).tooltip({ position: { my: "left", at: "left+75 center", collision: "flipfit" }, content: function () { return $(this).attr("title") } }), $(".tt-element").click(function () { $(".ui-tooltip").fadeOut() }), $(".line_preview").change(function () { linePreview(this.id) }), $(".svg_size_value").on("input change", function (e) { 0 >= $(this).val() && "" != $(this).val() ? $(this).val(1) : ($("#svg_width_slider").val($("#svg_width_value").val()), $("#svg_height_slider").val($("#svg_height_value").val()), resizeSVG()) }), $(".svg_size_slider").on("input change", function () { $("#svg_height_value").val($("#svg_height_slider").val()), $("#svg_width_value").val($("#svg_width_slider").val()), resizeSVG() }), $(".align_elements").click(function (e) { globalConfigChanged = !0, $(".added_elements").removeClass("alignable").addClass("draggable"), $(".all_elements, .align_elements").removeClass("faded_out"); let t = e.target.id, o, a; "" == t && (t = $(this).closest("a").attr("id")), $(".align_elements:not(#" + t + ")").addClass("faded_out"), $("#align_elements").show(), $("#connect_elements").prop("disabled", !0), hideConfigBar(), $(".all_elements").addClass("faded_out"), $(".added_elements").removeClass("draggable faded_out").addClass("alignable"), $(".type_icon").removeClass("draggable-group").addClass("alignable"), $("#ex_how_align").html("Now choose the reference element! <img src='img/icon_help.png' style='vertical-align: bottom;' title='You need to select a reference element for aligning. Afterwards, choose each element, which should be aligned the same.'>"), $(".alignable").off().click(function (e) { let i = e.target.id; if (null == a) "" == (i = e.target.id) && (i = e.target.parentNode.id), a = getSlots(o = getCoords(i)), $("#ex_how_align").html("Reference element selected. Choose each element now!"); else { let r = e.target.tagName.toLowerCase(); switch ("" == (i = e.target.id) && (i = e.target.parentNode.id, r = e.target.parentNode.tagName), console.log(r), t.replace("align_", "")) { case "center": switch (r) { case "circle": $("#" + i).attr("cx", a.top.x); break; case "rect": case "svg": $("#" + i).attr("x", a.top.x - Math.floor(parseInt($(this).attr("width")) / 2)); break; case "text": $("#" + i).attr("x", a.top.x) }break; case "left": switch (r) { case "circle": $("#" + i).attr("cx", a.left.x + parseInt($(this).attr("r")) + Math.floor(parseInt($(this).css("stroke-width")) / 2)); break; case "rect": case "svg": $("#" + i).attr("x", a.left.x + Math.floor(parseInt($(this).css("stroke-width")) / 2)); break; case "text": $("#" + i).attr("x", a.left.x + Math.floor(e.target.getComputedTextLength() / 2)) }break; case "right": switch (r) { case "circle": $("#" + i).attr("cx", a.right.x - parseInt($(this).attr("r")) - Math.floor(parseInt($(this).css("stroke-width")) / 2)); break; case "rect": case "svg": $("#" + i).attr("x", a.right.x - Math.floor(parseInt($(this).attr("width"))) - Math.floor(parseInt($(this).css("stroke-width")) / 2)); break; case "text": $("#" + i).attr("x", a.right.x - Math.floor(e.target.getComputedTextLength() / 2)) }break; case "vcenter": switch (r) { case "circle": $("#" + i).attr("cy", a.right.y); break; case "rect": case "svg": $("#" + i).attr("y", a.right.y - Math.floor(parseInt($(this).attr("height")) / 2)); break; case "text": $("#" + i).attr("y", a.right.y) }break; case "top": switch (r) { case "circle": $("#" + i).attr("cy", a.top.y + parseInt($(this).attr("r")) + Math.floor(parseInt($(this).css("stroke-width")) / 2)); break; case "rect": case "svg": $("#" + i).attr("y", a.top.y + Math.floor(parseInt($(this).css("stroke-width")) / 2)); break; case "text": $("#" + i).attr("y", a.top.y + Math.floor(parseInt($(this).css("font-size")) / 2)) }break; case "bottom": switch (r) { case "circle": $("#" + i).attr("cy", a.bottom.y - parseInt($(this).attr("r")) - Math.floor(parseInt($(this).css("stroke-width")) / 2)); break; case "rect": case "svg": $("#" + i).attr("y", a.bottom.y - Math.floor(parseInt($(this).attr("height"))) - Math.floor(parseInt($(this).css("stroke-width")) / 2)); break; case "text": $("#" + i).attr("y", a.bottom.y - Math.floor(parseInt($(this).css("font-size")) / 2)) } }console.log(a); let s = $("path[id*=" + i + "]"); s.length > 0 && s.each(function (e) { let t = s[e].id.split("_"); connectElements(s[e].id, t[1], t[2]) }) } }) }), $("#align_elements").click(function () { $("#ex_how_align").html("Choose an alignment and select a reference element"), $("#connect_elements").prop("disabled", !1), $(this).hide(), $(".alignable").off(), $(".added_elements").removeClass("alignable").addClass("draggable"), $(".type_icon").removeClass("alignable").addClass("draggable-group"), $(".all_elements, .align_elements").removeClass("faded_out") }), $(".add_element").click(function (e) { 0 === $(".added_elements").length ? max_elm_id = 0 : ($(".added_elements").each(function () { max_elm_id = Math.max(this.id, max_elm_id) }), max_elm_id++); let t = { id: max_elm_id, radius: 50, width: 100, height: 100, rx: 10, stroke: 5, pos_x: 50 + getRandomInt(50), pos_y: 50 + getRandomInt(50), color: getRandomRGBA(), fill: "none", font_size: 20, font_family: '"Arial", sans-serif', unit: "kW" }, o = e.target.id; switch ("" == o && (o = $(this).closest("a").attr("id")), o) { case "add_circle": t.format = "circle", t.frame = "_overlay", t.url = ""; break; case "add_rect": t.format = "rect", t.frame = "_overlay", t.url = ""; break; case "add_text": t.format = "text", t.text = "Text"; break; case "add_datasource": t.threshold = 0, t.calculate_kw = !1, t.convert = !1, t.decimal_places = 0, t.format = "text", t.subType = "datasource", t.text = "Datasource " + max_elm_id, t.source = "-1"; break; case "add_icon": t.format = "icon", t.width = 24, t.height = 24, t.icon = "mdi:omega" }("text" == t.format || "datasource" == t.format) && (t.fill = t.color, t.color = ""), addElement(t) }), $("#enable_animation").on("click change", function () { $(this).is(":checked") ? $(".anim_element").removeClass("no_animation").addClass("animation") : $(".anim_element").removeClass("animation").addClass("no_animation") }), $("#enable_grid").on("click change", function () { $(this).is(":checked") ? $("#help_grid").fadeIn("fast") : $("#help_grid").fadeOut("fast") }), $("#config_close").click(function () { hideConfigBar() }), $("#iframe_close").click(function () { hideIframe() }), $("#enable_area_catch").on("click change", function () { $(this).is(":checked") ? $("#svg_preview").addClass("svg_preview_catch") : $("#svg_preview").removeClass("svg_preview_catch") }), $("#connect_elements").click(function () { globalConfigChanged = !0; let e, t, o, a; "Done" == $(this).val() ? ($(".clickable").off(), $(".added_elements").removeClass("clickable").addClass("draggable"), $(".all_elements").removeClass("faded_out no_click"), $("#ex_how_connect").html("Click the button above to connect 2 elements."), $(this).val("Connect").removeClass("red"), $(".clickable").off(), showConnectionPoints(!1)) : $(".connector").length >= 2 ? (hideConfigBar(), showConnectionPoints(), $("#ex_how_connect").html("Now choose the first element! You can choose the Element or the ConnectionPoints! <img src='img/icon_help.png' style='vertical-align: bottom;' title='<b>Element:</b><br>If you choose the element itself (click in the middle), the line will always use the shortest distance to the element.<br><b>ConnectionPoint:</b><br>If you choose a connectionPoint, the connection will stay at that choosen one.'>"), $(".all_elements").addClass("faded_out no_click"), $(".connector").removeClass("draggable faded_out no_click").addClass("clickable"), $(".clickable").off().click(function () { let i = $(this).attr("id"); if (i || (i = $(this).data("element")), null == e) e = i, o = $(this).data("slot"), $("#ex_how_connect").html("First Element selected!<br>Please choose the next one!"); else if (e == i) $("#ex_how_connect").html("Do not select the same Element!"), t = null, a = null; else { t = i, a = $(this).data("slot"); let r = "path_" + e + "_" + t; if ($("#" + r).length > 0) failedMessage("This connection already exists!"); else { let s = document.createElementNS("http://www.w3.org/2000/svg", "path"); s.setAttribute("id", r), s.setAttribute("class", "type_def"), s.setAttribute("data-start-slot", o), s.setAttribute("data-end-slot", a), $(s).appendTo("#placeholder_defs"), addElement({ format: "line", id: "line_" + r, color: configuration.line.stroke, href: "#" + r }), connectElements(r, e, t) } showConnectionPoints(!1), e = null, t = null, $("#ex_how_connect").html("Click the button above to connect 2 elements."), $("#connect_elements").val("Connect").removeClass("red"), $(".clickable").off(), $(".added_elements").removeClass("clickable").addClass("draggable"), $(".all_elements").removeClass("faded_out no_click") } }), $(this).val("Done").addClass("red")) : failedMessage("There are no connectable elements on the surface!<br>Min. 2 rectangle or circles are required!") }), $("#save_workspace").click(function () { globalConfigChanged = !1; let t, o = {}, a = {}, i = {}, r = {}, s = {}, n = {}; o = { basic: { enable_grid: !!$("#enable_grid").is(":checked"), enable_animation: !!$("#enable_animation").is(":checked"), enable_area_catch: !!$("#enable_area_catch").is(":checked"), height: $("#svg_config").attr("height"), width: $("#svg_config").attr("width"), styles: $("#own_css").val() }, animation: {}, animation_configuration: {}, line: {}, elements: {}, defs: {}, lines: {}, animations: {}, icons: {}, datasources: {} }, $(".added_elements").length > 0 ? ($(".type_circle").each(function () { a[t = this.id] = { type: "circle", id: t, radius: $(this).attr("r"), pos_x: $(this).attr("cx"), pos_y: $(this).attr("cy"), fill: $(this).css("fill"), color: $(this).css("stroke"), stroke: $(this).css("stroke-width").replace("px", ""), shadow: getShadowColor(t) } }), $(".type_rect").each(function () { a[t = this.id] = { type: "rect", id: t, rx: $(this).attr("rx"), height: $(this).attr("height"), width: $(this).attr("width"), pos_x: $(this).attr("x"), pos_y: $(this).attr("y"), fill: $(this).css("fill"), color: $(this).css("stroke"), stroke: $(this).css("stroke-width").replace("px", ""), shadow: getShadowColor(t) } }), $(".type_text").each(function () { a[t = this.id] = { type: "text", id: t, pos_x: $(this).attr("x"), pos_y: $(this).attr("y"), color: $(this).css("stroke"), fill: $(this).css("fill"), font_family: $(this).css("font-family"), font_size: $(this).css("font-size").replace("px", ""), degree: getRotationDegrees($(this)), text: $(this).html(), shadow: getShadowColor(t) } }), $(".type_datasource").each(function () { a[t = this.id] = { type: "text", subType: "datasource", id: t, pos_x: $(this).attr("x"), pos_y: $(this).attr("y"), color: $(this).css("stroke"), fill: $(this).css("fill"), font_family: $(this).css("font-family"), font_size: $(this).css("font-size").replace("px", ""), degree: getRotationDegrees($(this)), text: "ID " + t, unit: $(this).data("unit"), source: $(this).data("source"), shadow: getShadowColor(t), threshold: $(this).data("threshold") || 0, calculate_kw: $(this).data("calculate_kw") || !1, convert: $(this).data("convert") || !1, decimal_places: $(this).data("decimal_places") || 0 } }), $(".type_icon").each(function () { a[t = this.id] = { type: "icon", id: t, icon: $(this).data("icon"), width: $(this).data("width"), height: $(this).data("height"), color: $(this).css("color"), pos_x: $(this).attr("x"), pos_y: $(this).attr("y"), shadow: getShadowColor(t) } }), $(".type_def").each(function () { i[t = this.id] = { type: "def", id: t, d: $(this).attr("d"), startSlot: $(this).data("start-slot"), endSlot: $(this).data("end-slot") } }), $(".type_line").each(function () { r[t = this.id] = { type: "line", id: t, href: $(this).attr("xlink:href"), color: $(this).css("stroke") } }), $(".type_animation").each(function () { let e = (t = this.id).split("_"), o = []; o.push(parseInt($("#" + e[2]).data("animation"))), o.push(parseInt($("#" + e[3]).data("animation"))), s[t] = { type: "animation", id: t, href: $(this).attr("xlink:href"), color: $(this).css("stroke"), sources: o, threshold: $(this).data("threshold"), animation: $(this).data("animation"), animation_properties: $(this).data("animation_properties") } }), $(".data-table tbody tr").each(function () { n[t = $(this).data("id")] = { source: $(this).data("source"), alias: $(this).data("alias") } }), o.elements = a, o.animation = configuration.animation, o.animation_configuration = configuration.animation_configuration, o.line = configuration.line, o.defs = i, o.lines = r, o.animations = s, o.datasources = n, $("#save_output").val(JSON.stringify(o, void 0, 4)), localMode ? successMessage("Local Output of Config!") : e.emit("setState", objID[0], { val: JSON.stringify(o), ack: !0 }, function (e) { e ? (console.log(e), failedMessage("An error occured while saving your workspace!")) : successMessage("Your workspace has been saved successfully") })) : failedMessage("You do not have any elements to save!") }) }), $(document).ready(function () { $(".input_button").on("click touchstart", function () { this.blur() }), $(window).on("beforeunload", function () { if (globalConfigChanged) return "There are unsaved changes. Are you sure to leave now?" }), $("#frm-addDataSource").submit(function (e) { e.preventDefault(); let t = $("#elm_ds_source").val(), o = $("#elm_ds_alias").val() ? $("#elm_ds_alias").val() : ""; addDataSourceRow(-1, t, o), $("#elm_ds_source, #elm_ds_alias").val("") }), $(".data-table").on("click", ".btn-delete", function () { globalConfigChanged = !0, $(this).parents("tr").fadeOut("fast", function () { $(this).remove(), 0 == $(".data-table tbody tr").length && $(".data-table tbody").append("<tr id='ds_tmp_line' data-id='-1'><td>There are currently no Datasources added!</td><td></td><td></td>") }) }), $(".data-table").on("click", ".btn-edit", function () { let e = $(this).parents("tr").attr("data-alias"), t = $(this).parents("tr").attr("data-source"); $(this).parents("tr").find("td:eq(0)").html('<div class="form_div no_margin"><input type="text" class="input_text" id="edit_ds_alias" name="edit_ds_alias" autocorrect="off" autocomplete="off" value="' + e + '"></div>'), $(this).parents("tr").find("td:eq(1)").html('<div class="form_div no_margin"><input type="text" class="input_text icon_in_input_pad" id="edit_ds_source" name="edit_ds_source" autocorrect="off" autocomplete="off" minlength="5" required="" value="' + t + '"><div class="icon_wrapper"><a class="datasource tt-element icon_in_input" title="Select Datasource"><span class="iconify" data-icon="mdi:database-search" data-height="24"></span></a></div></div>'), $(this).parents("tr").find("td:eq(2)").prepend("<button class='all_datasource ds_buttons btn-update'><span class='iconify' data-height='24' data-icon='mdi:check'>Update</span></button><button class='all_datasource ds_buttons btn-cancel'><span class='iconify' data-height='24' data-icon='mdi:close'>Close</span></button>"), $(this).hide() }), $(".data-table").on("click", ".btn-cancel", function () { let e = $(this).parents("tr").attr("data-alias"), t = $(this).parents("tr").attr("data-source"); $(this).parents("tr").find("td:eq(0)").text(e), $(this).parents("tr").find("td:eq(1)").text(t), $(this).parents("tr").find(".btn-edit").show(), $(this).parents("tr").find(".btn-update").remove(), $(this).parents("tr").find(".btn-cancel").remove() }), $(".data-table").on("click", ".btn-update", function () { globalConfigChanged = !0; let e = $("#edit_ds_alias").val(), t = $("#edit_ds_source").val(); $(this).parents("tr").find("td:eq(0)").text(e), $(this).parents("tr").find("td:eq(1)").text(t), $(this).parents("tr").attr("data-alias", e), $(this).parents("tr").attr("data-source", t), $(this).parents("tr").find(".btn-edit").show(), $(this).parents("tr").find(".btn-cancel").remove(), $(this).parents("tr").find(".btn-update").remove() }), $("body").on("click", ".datasource", function () { let e = $(this).parent("div").parent("div").children("input").attr("id"); console.log(e), initSelectId(function (t) { t.selectId("show", $("#" + e).val(), function (t) { t != $("#" + e).val() && ($("#" + e).val(t).change(), $("#" + e).focus()) }) }) }), $(".data-table").on("click", "th", function () { $(".sort_icon").html(""); var e = $(this).parents("table").eq(0), t = e.find("tr:gt(0)").toArray().sort(dataSourceComparer($(this).index())); this.asc = !this.asc, $(this).children("span").html('<span class="iconify" data-icon="mdi:sort-alphabetical-ascending" data-height="18">'), this.asc || (t = t.reverse(), $(this).children("span").html('<span class="iconify" data-icon="mdi:sort-alphabetical-descending" data-height="18">')); for (var o = 0; o < t.length; o++)e.append(t[o]) }), loadConfig() });